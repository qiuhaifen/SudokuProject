#include<iostream>
#include<stdio.h>
using namespace std;


typedef struct  LNode
{
	int data;
	LNode *next;
}LinkList;

//建立一个链表,你逆向输入n个元素的值
int listCreate(LinkList * srcList, int number)
{
	LinkList *pTemp;
	int i = 0;
	srcList->next = NULL;
	srcList->data = 0;

	for (i = number; i > 0; --i)
	{
		pTemp = (LinkList *)malloc(sizeof(LNode));
		pTemp->data = i+20;//随便赋值
		pTemp->next = srcList->next;
		srcList->next = pTemp;
	}
	return 0;
}

//销毁一个链表
int listDestroy(LinkList *srcList)
{
	if (!srcList || !srcList->next)
	{
		return 0;
	}

	LinkList *p1 = srcList->next;
	LinkList *p2 = p1->next;

	do
	{
		free(p1);
		p1 = p2;
		if (p2 != NULL)
		{
			p2 = p2->next;
		}
	}while (p1);
	return 0;
}

//插入操作
//在strList第nIndex之前插入数据data
//nIndex最小为1
int listInsert(LinkList *srcList, int nIndex, int data)
{
	LinkList *pStart = srcList;
	int j = 0;
	if (nIndex < 1)
	{
		return 0;
	}
	while((pStart) && (j < nIndex-1))
	{
		pStart = pStart->next;
		j++;
	}
	if ((!pStart) || (j > nIndex-1))
	{
		return -1;//出错
	}

	LinkList *temp = (LinkList *)malloc(sizeof(LNode));
	temp->data = data;
	temp->next = pStart->next;
	pStart->next = temp;
	return 0;
}

//删除操作
//strList第nIndex位置的结点删除，并通过data返回被删的元素的值
//通常情况下返回的这个值是用不到的，不过这里也保留备用
int listDelete(LinkList *srcList, int nIndex, int *data)
{
	LinkList *pStart = srcList;
	int j = 0;
	if (nIndex < 1)
	{
		return 0;
	}

	while((pStart) && (j < nIndex-1))
	{
		pStart = pStart->next;
		j++;
	}
	if ((!pStart) || (j > nIndex-1))
	{
		return -1;//出错
	}
	LinkList *pTemp = pStart->next;
	pStart->next = pTemp->next;
	*data = pTemp->data;
	free(pTemp);

}
void printList(LNode output)
{
	cout<<output.data;

}

int  listLength( LinkList *output)
{
	LinkList *p;int length=0;
	for(p=output;p->next!=NULL;p=p->next)
         length+=1;
	return length;
}

//求冥集，nArray是存放n个元素的数组
//首次调用i传1,表示已对前面i-1个元素做了处理
void GetPowerSet(int nArray[], int nLength, int i, LinkList *outPut)
{
	int k = 0;
	int nTemp = 0;
	if (i >= nLength)
	{
		printList(*outPut);
	}
	else
	{
		k = listLength(outPut);
		listInsert(outPut, k+1, nArray[i]);
		GetPowerSet(nArray, nLength, i+1, outPut);
		listDelete(outPut, k+1, &nTemp);
		GetPowerSet(nArray, nLength, i+1, outPut);
	}

}

void main()
{   char end;
	int n,L,R;int a[10];
	cout<<"输入元素数目:";
	cin>>n;
	cout<<"输入元素:";
	for(int i=1;i<=n;i++)
		cin>>a[i];
	cout<<"输入L,R:";
	cin>>L>>R;
	LinkList *srcList=(LinkList *)malloc(sizeof(LNode));
	listCreate(srcList, n);
	GetPowerSet(a, n, 1, srcList);
	cin>>end;


}
